AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 resources for model training


Parameters:
  ProjectName:
    Description: Name of the project
    Type: String
  
  EnvType:
    Description: Environment type
    Type: String
    AllowedValues: [dev, test, prod]

  AvailabilityZone:
    Description: Availability zone within ap-southeast-2 region chosen for this deployment
    Type: String
    AllowedValues: [ap-southeast-2a, ap-southeast-2b, ap-southeast-2c]
  
  IamManagedPolicyS3AccessArn:
    Description: Allows EC2 instance to write to S3 bucket
    Type: String
    Default: !ImportValue "${AWS::StackName}-IamManagedPolicyS3AccessArn"
    
  ImageIdLinuxGpu:
    Description: >
      AMI ID for Linux GPU EC2 instance. Default: Deep Learning OSS NVIDIA
      Driver AMI GPU TensorFlow 2.16 (Ubuntu 20.04)
    Type: AWS::EC2::Image::Id
    Default: ami-0f4269dc1a873f998
  
  InstanceTypeImageModelTraining:
    Description: EC2 instance (GPU) size for training deep learning model
    Type: String
    Default: p2.8xlarge
  
  SecurityGroupId:
    Description: >
      Security Group ID
    Type: AWS::EC2::SecurityGroup::Id
    ConstraintDescription: A Security Group ID 
  
  SubnetId:
    Description: >
      Subnet ID
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: A Subnet from within the VPC must be defined


Resources:
  IamEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
      Description: Allows EC2 instances to read and write to S3 bucket
      ManagedPolicyArns:
        - !Ref IamManagedPolicyS3AccessArn
      RoleName: !Sub "${ProjectName}-${EnvType}-ec2modeltrainings3access-iam-role"
      Tags:
      - Key: description
        Value: IAM role that allows EC2 instances to read and write to S3 bucket

  IamEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref IamEc2Role
      Path: "/"
      Roles:
        - Ref: IamEc2Role

  Ec2NetworkInterfaceImageModelTraining:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Network interface with security group and subnet
      GroupSet:
        - !Ref SecurityGroupId
      SubnetId: !Ref SubnetId
      Tags: 
        - Key: description
          Value: EC2 instance network interface
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvType}-ec2.imagemodeltraining.networkinterface"

  Ec2InstanceImageModelTraining:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      BlockDeviceMappings:
        - {'DeviceName': '/dev/xvdh', 'Ebs': {'DeleteOnTermination': True, 'VolumeSize': 100, 'VolumeType': 'gp3', 'Encrypted': True, 'KmsKeyId': 'alias/default-ebs-key'}}
      IamInstanceProfile: !Ref IamEc2InstanceProfile
      ImageId: !Ref ImageIdLinuxGpu
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref InstanceTypeImageModelTraining
      KeyName: my-project-ec2-key # NOTE: For some stupid reason, this MUST be declared as a string here and cannot be generated dynamically (e.g., ${ProjectName} will not work)
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Ec2NetworkInterfaceImageModelTraining
          DeviceIndex: "0"
      PrivateDnsNameOptions:
        HostnameType: "resource-name"
      Tags:
        - Key: description
          Value: EC2 instance with encrpyted EBS volume (100Gb, gp3)
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvType}-ec2.imagemodeltraining"
        - Key: always_on
          Value: "no"
        - Key: termination_protection
          Value: "no"
      Volumes:
        - Device: /dev/xvdf
          VolumeId: !Ref Ec2VolumeImageModelTraining

  Ec2VolumeImageModelTraining:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Encrypted: true
      Size: 100
      Tags:
        - Key: description
          Value: EBS volume (100Gb, gp3) attached to EC2 instance
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvType}-ebs.imagemodeltraining"
        - Key: always_on
          Value: "no"
      VolumeType: gp3

  CloudWatchAlarmImageModelTraining:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: LessThanThreshold
      TreatMissingData: missing
      Dimensions:
        - Value: !GetAtt Ec2InstanceImageModelTraining.InstanceId
          Name: InstanceId
      Period: 300
      EvaluationPeriods: 1
      Namespace: AWS/EC2
      AlarmActions:
        - !Sub "arn:aws:swf:${AWS::Region}:${AWS::AccountId}:action/actions/AWS_EC2.InstanceId.Stop/1.0"
        # - !Ref SnsTopic
      MetricName: CPUUtilization
      AlarmDescription: !Sub "CloudWatch alarm to stop '${ProjectName}-${EnvType}-ec2.imagemodeltraining' when average CPU utilisation drops below 10% over 5 minutes"
      AlarmName: !Sub "cloudwatchalarm-${ProjectName}-${EnvType}-ec2.imagemodeltraining-stop"
      Statistic: Average
      DatapointsToAlarm: 1
      Tags:
        - Key: description
          Value: !Sub "CloudWatch alarm to stop '${ProjectName}-${EnvType}-ec2.imagemodeltraining' when average CPU utilisation drops below 10 percent over 5 minutes"
        - Key: Name
          Value: !Sub "cloudwatchalarm-${ProjectName}-${EnvType}-ec2.imagemodeltraining-stop"
      Threshold: 10